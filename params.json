{"name":"Panns","tagline":"高维空间下索引优化的解决方案","body":"panns -- 最邻近搜索\r\n==================\r\n\r\n\r\npanns是Python Approximate Nearest Neighbor Search的简称。panns是一种用于在高维空间中寻求[最邻近节点](http://en.wikipedia.org/wiki/Nearest_neighbor_search#Approximate_nearest_neighbor)的python开发包。一种比较典型的panns应用是在[语义网络](http://baike.baidu.com/view/157370.htm?fr=aladdin)中对大量文本资料对有关联的字符串进行搜寻。相对其他具有相同功能的开发包，panns有自己性能上的优势。目前，panns支持两种距离度量：[欧式距离](http://baike.baidu.com/view/1615257.htm?fr=aladdin)和余弦距离。[余弦相似度](http://zh.wikipedia.org/wiki/余弦相似性)通常用于两个向量的夹角小于90度，因此，数据集需要标准化(值控制在0到1之间)。\r\n\r\n\r\n```python\r\n\r\nfrom panns import *\r\n\r\np1 = PannsIndex(metric='angular')    # index using cosine distance metric\r\np2 = PannsIndex(metric='euclidean')  # index using Euclidean distance metric\r\n...\r\n```\r\n\r\npanns本来只是我们正在开发项目中一个很小的模块。最开始我们是想能够在高维空间的环境下找到一种简单的工具进行高效的K-NN搜索，比方说，[k-d树](http://en.wikipedia.org/wiki/K-d_tree)。但在这里，高维指的是每个数据集具有成千上万不同的属性，但这已经超过k-d树的处理能力。\r\n\r\npanns是由[Liang Wang](http://cs.helsinki.fi/liang.wang) @ Helsinki University开发，Yiping Chen @ Helsinki University维护。若您有任何疑问，请发邮件至`liang.wang[at]helsinki.fi`或者`yiping.chen[at]helsinki.fi`。您还可以在[panns-group](https://groups.google.com/forum/#!forum/panns)提出您的宝贵意见。\r\n\r\n\r\n## 特征\r\n\r\n* 纯python的实现。\r\n* 对处理大型高维数据集进行优化，比方说，大于500维度。\r\n* 生成很小但有很高搜寻准确率的索引文件。\r\n* 支持欧式距离和余弦距离。\r\n* 支持并行索引的生成。\r\n* 极低的内存使用率以及索引可以被多个进程共享。\r\n* 支持raw，csv和[HDF5](http://www.hdfgroup.org/HDF5/)数据集。\r\n\r\n\r\n## 安装\r\n\r\n在panns中大部分科学计算依赖于[Numpy](http://www.numpy.org/)和[Scipy](http://www.scipy.org/)。至于一些涉及到HDF5的运算，依赖的包是[h5py](http://www.h5py.org/)。值得注意的是，在这里HDF5是可选的。如果不需要相关的运算，您可以考虑不使用HDF5文件。在使用panns的功能之前，请确保上述包已经成功安装。您可以通过下面的shell命令来安装上述包。\r\n\r\n\r\n```bash\r\nsudo pip install numpy --upgrade\r\nsudo pip install scipy --upgrade\r\nsudo pip install h5py --upgrade\r\n```\r\n在安装完上述包后，您可以开始安装panns。安装panns的过程相当简单，您有两种安装方式可以选择：直接通过PyPI安装，或者下载panns的源代码进行手动安装。\r\n\r\n\r\n```bash\r\nsudo pip install panns --upgrade\r\n```\r\n\r\n如果您对panns的源代码有兴趣，请加入我们。您可以从Github下载源代码。\r\n\r\n\r\n```bash\r\ngit clone git@github.com:ryanrhymes/panns.git\r\n```\r\n\r\n\r\n\r\n## 快速开始\r\npanns假定数据集是一个基于排的矩阵，在这个矩阵中每一排代表一个n维的数据点。下面的代码就是一个例子：第一部分定义一个100维度的基于欧式距离的索引，第二部分创建一个1000x100的数据集(数据矩阵)，第三部分根据先前创建的数据集生成一个50个二叉树的索引，然后将这个索引储存在idx文件中。\r\n\r\n\r\n```python\r\n\r\nfrom panns import *\r\n\r\n# create an index of Euclidean distance\r\np = PannsIndex(dimension=100, metric='euclidean')\r\n\r\n# generate a 1000 x 100 dataset\r\nfor i in xrange(1000):\r\n    v = gaussian_vector(100)\r\n    p.add_vector(v)\r\n\r\n# build an index of 50 trees and save to a file\r\np.build(50)\r\np.save('test.idx')\r\n```\r\n\r\n除了使用`add_vector(v)`函数，panns还提供其他多种方式去加载一个数据集。使用[HDF5](http://www.hdfgroup.org/HDF5/)去创建相当大的数据集虽然会极大的降低性能，但是这种方式是值得推荐的，因为我们可以通过并行创建去弥补其损失。具体的逻辑我们后面会解释。\r\n\r\n```python\r\n# datasets can be loaded in the following ways\r\np.load_matrix(A)                     # load a list of row vectors or a numpy matrix\r\np.load_csv(fname, sep=',')           # load a csv file with specified separator\r\np.load_hdf5(fname, dataset='panns')  # load a HDF5 file with specified dataset\r\n```\r\n\r\n被存储在文件中的二叉树索引未来可以被多个进程加载或者共享。因为这个办法，对索引的请求可以通过并行进一步来提高。下面的代码就是个例子，首先加载之前创建的idx文件，然后请求其返回一个大约10最邻近节点。\r\n\r\n\r\n```python\r\n\r\nfrom panns import *\r\n\r\np = PannsIndex(metric='euclidean')\r\np.load('test.idx')\r\n\r\nv = gaussian_vector(100)\r\nn = p.query(v, 10)\r\n```\r\n\r\n通常，在高维资料集中创建索引是个很耗时的过程，panns通过两个方面加速这个过程：优化代码以及充分利用物理资源。在多核的环境中，并行创建更容易达到。代码如下：\r\n\r\n\r\n```python\r\n\r\nfrom panns import *\r\n\r\np = PannsIndex(metric='angular')\r\n\r\n....\r\n\r\np.parallelize(True)\r\np.build()\r\n\r\n```\r\n\r\n\r\n\r\n## 原理\r\n\r\n简单来说，我们通过[随机投影](http://en.wikipedia.org/wiki/Locality-sensitive_hashing#Random_projection)来获取k-NN的近似值。索引的创建可以通过生成一个二叉树来实现。树中每个节点代表一些特定数值点的投影，进而通过他们的平均值将其分为左子树和右子树。准确率可以通过下面的方式来提高：\r\n\r\n\r\n\r\n* 合理的选取样本均值的偏移值。\r\n* 选择合理的投影向量，选择随机值或者成分值(成分值在这里指的是将所有值分成几个特定区间，在每个区间内选择合理的值)\r\n* 使用更多的投影(但是需要更多的生成时间和更大的索引)\r\n* 使用更多的二叉树(也要更多的生成时间和更大的索引)\r\n\r\n提高k-NN值的准确率是通过增大索引为代价的。panns希望能在这两个冲突的值中寻求一个平衡点。与其他的库为每个节点生成一个全新的随机向量不同，panns重复使用不同树中的投影向量。当维数很高或者数很多的时候,这种办法极大降低索引的大小。与此同时，重复使用投影向量不会降低准确性(具体请看评估部分)\r\n\r\n## 评估\r\n\r\n在评估部分，我们把panns和[Annoy](https://github.com/spotify/annoy)做了简单的比较。Annoy是和panns具有类似功能的C++开发包，它被应用在Spotify推荐系统中。在评估的过程中，我们使用5000x200的数据集，将其命名为5000个200维度的向量。为了公平起见，Annoy和panns各生成128个二叉树。我们从两种不同的距离度量(Euclidean和cosine)进行比较，评估结果如下：\r\n\r\n\r\n|            | panns (Euclidean) | Annoy (Euclidean) | panns (cosine) | Annoy (cosine) |\r\n|:----------:|:-----------------:|:-----------------:|:--------------:|:--------------:|\r\n|   准确率   |       69.2%       |       48.8%       |      70.1%     |      50.4%     |\r\n|  索引大小  |       5.4 MB      |       20 MB       |     5.4 MB     |      11 MB     |\r\n\r\n\r\n相对于Annoy，对于更小的索引文件panns能达到更高的准确率。其中缘由已经在原理部分简述过。简单来说，实现高准确率是通过选取合理的样本均值的偏离值，以及重复使用投影向量来实现更小的索引。\r\n\r\n\r\n值得注意的是这里的评估远远不够，我们还需要其他方面的评估。\r\n\r\n\r\n## 讨论\r\n\r\n我们非常欢迎关于其的任何讨论和建议。在[panns-group](https://groups.google.com/forum/#!forum/panns)，您可以得到更多相关信息。\r\n\r\n\r\n## 未来工作\r\n\r\n* 在索引文件上实现mmap去提高索引加载速度\r\n* 用并行性去提高请求性能\r\n* 从更广泛的角度去评估","google":"UA-51583155-1","note":"Don't delete this file! It's used internally to help with page regeneration."}